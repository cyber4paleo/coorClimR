names(x) <- c("cores", "memory", "spatialResolution", "numOccurrences", "totalTime", "AUC")
plot(x$cores, x$totalTime)
plot(x$cores, x$totalTime, col=)
plot(x$cores, x$totalTime, col='numOccurrences')
plot(x$cores, x$totalTime, col=numOccurrences)
plot(x$cores, x$totalTime, col=x$numOccurrences)
x <- oqc("SELECT cores, MEMORY, spatialResolution, numOccurrences, AVG( totalTime ) , AVG( testingAUC )
FROM Results
WHERE MEMORY <0 AND numOccurrences < 10000
GROUP BY cores, MEMORY, spatialResolution, numOccurrences
ORDER BY AVG( totalTime ) ASC")
x
names(x) <- c("cores", "memory", "spatialResolution", "numOccurrences", "totalTime", "AUC")
plot(x$cores, x$totalTime, col=x$numOccurrences)
model <- lm(cores ~ totalTime, x)
model
summary(model)
plot(model)
plot(x$cores, x$totalTime, col=x$numOccurrences)
abline(model)
x1 <- x[which(x$numOccurrences == 50), ]
x1
x2 <- x[which(x$numoccurrences == 500), ]
x3 <- x[which(x$numOccurrences == 1000), ]
x2
x3
x2 <- x[which(x$numOccurrences == 500), ]
plot(x3)
x2
model1 <- lm(cores ~ totalTime, x1)
model2 <- lm(cores ~ totalTime, x2)
model3 <- lm(cores ~ totalTime, x3)
model1
plot(model1)
plot(x1$cores, x1$totalTime)
abline(model)
model1 <- lm(cores ~ totalTime, data=x1)
abline(model1)
model1 <- nls(cores ~ totalTime, data=x1)
summary(model1)
plot(x1$cores, x1$totalTime)
model1 <- lm(cores ~ totalTime, data=x1)
abline(model1)
attach(x1)
totalTime
plot(totalTime, AUC)
testModel <- lm(totalTime ~ AUC)
testModel <- lm(totalTime ~ AUC, data=x1)
abline(testModel)
?jitter
plot(totalTime, AUC)
plot(x1)
plot(x1$cores, x1$totalTime)
model1 <- lm(cores ~ totalTime, data=x1)
abline(model1)
x1
abline(x1)
?abline
abline(x1$cores, x1$totalTime)
attr
summary(model1)
lines(lowess(cores,totalTime), col="blue")
?lowess
plot(cores, totalTime, col='red')
lines(lowess(cores,totalTime), col="red")
model1 <- lowess(cores, totalTime)
model1
summary(model1)
formula
f
model1 <- lm(totalTime ~ cores, data=x1)
abline(model1)
summary(model1)
f
f <- totalTime ~ 1/cores
f
model1.nls <- nls(f, data=x1)
model1.nls <- nls(totalTime ~ (1/cores), data=x1)
model1.nls <- nls(totalTime ~ exp(1/cores), data=x1)
model1.nls <- nls(totalTime ~ exp(cores), data=x1)
model1.nls <- nls(totalTime ~ cores, data=x1)
model1.nls <- nls(totalTime ~ log(cores), data=x1)
DNase1 <- subset(DNase, Run == 1)
DNase1
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)
?SSLogis
?SSlogis
# generate data
beta <- 0.05
n <- 100
temp <- data.frame(y = exp(beta * seq(n)) + rnorm(n), x = seq(n))
# plot data
plot(temp$x, temp$y)
# fit non-linear model
mod <- nls(y ~ exp(a + b * x), data = temp, start = list(a = 0, b = 0))
mod
temp
a
?exp
exp(1+2)
model1.nls <- nls(totalTime ~ log(cores), data=x1, start=list(totalTime=0, cores=0))
model1.nls <- nls(totalTime ~ log(cores), data=x1, start=list(totalTime=Inf, cores=0))
model1.nls <- nls(totalTime ~ log(cores), data=x1, start=list(totalTime=Inf)
)
model1.nls <- nls(totalTime ~ 1/a + exp(cores), data=x1, start=list(totalTime=Inf, a=0))
model1.nls <- nls(totalTime ~ 1/a + exp(cores), data=x1, start=list(totalTime=1000, a=0))
model1.nls <- nls(totalTime ~ 1/a + exp(cores), data=x1, start=list( a=0))
model1.nls <- nls(totalTime ~ 1/a + cores, data=x1, start=list( a=0))
model1.nls <- nls(totalTime ~ 1/a, data=x1, start=list( a=0))
model1.nls <- nls(totalTime ~ exp(a + b * cores), data=x1, start=list( a=0))
model1.nls <- nls(totalTime ~ exp(a + b * cores), data=x1, start=list( a=0, b=0))
plot(cores, totalTime, col='red')
lines(x1$cores, predict(model1.nls, list(x = x1$cores)))
model1.nls <- nls(totalTime ~ 1/exp(b * cores), data=x1, start=list( b=0))
lines(x1$cores, predict(model1.nls, list(x = x1$cores)))
model1.nls <- nls(totalTime ~ b/exp(cores), data=x1, start=list( b=0))
lines(x1$cores, predict(model1.nls, list(x = x1$cores)))
model1.nls <- nls(totalTime ~ 1/exp(b), data=x1, start=list( b=0))
lines(x1$cores, predict(model1.nls, list(x = x1$cores)))
model1.nls <- nls(totalTime ~ a/cores, data=x1, start=list( b=0))
model1.nls <- nls(totalTime ~ b/cores, data=x1, start=list( b=0))
lines(x1$cores, predict(model1.nls, list(x = x1$cores)))
model1.nls <- nls(totalTime ~ 1/cores, data=x1, start=list( b=0))
model1.nls <- nls(totalTime ~ 1/cores, data=x1)
plot(x1$cores, x1$totalTime, col='red')
points(x2$cores, x2$totalTime, col='blue')
xlim
plot(x1$cores, x1$totalTime, col='red', xlim=x(0, 500))
plot(x1$cores, x1$totalTime, col='red', xlim=c(0, 500))
plot(x1$cores, x1$totalTime, col='red', ylim=c(0, 500))
max(x2$totalTime)
plot(x1$cores, x1$totalTime, col='red', ylim=c(0, 150))
points(x2$cores, x2$totalTime, col='blue')
lines(lowess(x1$cores, x1$totalTime), col='red')
lines(lowess(x2$cores, x2$totalTime), col='blue')
x3
points(x3$cores, x3$totalTime, col='forestgreen')
lines(lowess(x3$cores, x3totalTime), col='forestgreen')
lines(lowess(x3$cores, x3$totalTime), col='forestgreen')
x <- oqc("SELECT cores, MEMORY, spatialResolution, numOccurrences, AVG( totalTime ) , AVG( testingAUC ), variance(totalTime), variance(testingAUC), min(totalTime), max(totalTime), max(totalTime)
FROM Results
WHERE MEMORY <0 AND numOccurrences < 10000
GROUP BY cores, MEMORY, spatialResolution, numOccurrences
ORDER BY AVG( totalTime ) ASC")
x
names(x) <- c("cores", "memory", "spatialResolution", "numOccurrences", "meanTotalTime", "meanAUC", "varTotalTime", "varAUC", "minTotalTime", "maxTotalTime", "maxAUC")
x$maxAUC <- NULL
x$memory<- NULL
x
plot(x$meanTotalTime, x$varTotalTime)
m
m <- lm(varTotalTime ~ meanTotalTime)
m <- lm(varTotalTime ~ meanTotalTime, x)
abline(m)
summary(m)
cr
cor
cor(m)
cor(x$varTotalTime, x$meanTotalTime)
plot(x$meanTotalTime, x$varTotalTime/x$meanTotalTime)
m <- lm(varTotalTime/meanTotalTime ~ meanTotalTime, x)
abline(m)
hist(x$varTotalTime)
hist(x$varTotalTime, breaks=100)
hist(x$varTotalTime, breaks=10)
hist(x$varTotalTime, breaks=25)
density
density(x$totalTime)
density(x$varotalTime)
density(x$varTotalTime)
lines(density(x$varTotalTime)
)
plot(density(x$varTotalTime)
)
plot(density(x$varTotalTime), n=10)
plot(density(x$varTotalTime))
hist(x$varTotalTime, breaks=25)
plot(density(x$varTotalTime))
s1 <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/logical_solutions_aws.csv")
s1
s1 <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/logical_solutions_aws.csv", header=TRUE)
s1
s1 <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/logical_solutions_aws.csv", skip=1)
s1
cumsum
s1$cumsum <- cumsum(s1$TotalCostPerConfig)
s1
plot(cumsum)
plot(s1$cumsum)
plot(s1$vCPU, s1$cumsum)
plot(s1$cumsum)
plot(s1$cumsum, xlab="ID", ylab="Cumulative Dollar Estimate")
title("AWS Logical Computing-Type\nCumulative Dollar Estimate")
s2 <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/sensitivity.csv")
s2
s2 <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/sensitivity.csv", skip=1)
s2
s2$cumsum <- cumsum(s2$TotalCostPerConfig)
names(s2)
s1
s1 <- s1[-nrow(s1), ]
s1
s1 <- s1[-nrow(s1), ]
s1
plot(s1$cumsum, xlab="ID", ylab="Cumulative Dollar Estimate")
title("AWS Logical Computing-Type\nCumulative Dollar Estimate")
s2
sw <- s2[-nrow[s2], ]
s2 <- s2[-nrow(s2), ]
s2 <- s2[-nrow(s2), ]
s2
s2$cumsum <- cumsum(s2$TotalCostPerConfig)
s2$totalCostPerConfig
s2$TotalCostPerConfig
as.vector(s2$TotalCostPerConfig)
s2$TotalCostPerConfig <- as.vector(s2$TotalCostPerConfig)
s2
s2$cumsum <- cumsum(s2$TotalCostPerConfig)
plot(s2$CPU)
names(s2)
plot(s2$CPUs, s2$cumsum)
s2 <- s2[-which(s2$CPUs > 100), ]
s2
plot(s2$CPUs, s2$cumsum)
s3 <- read.csv("/users/scottsfarley/documents/thesis-scripts/data/review/CPUs_only.csv")
s3
s4
s3 <- read.csv("/users/scottsfarley/documents/thesis-scripts/data/review/CPUs_only.csv", skip=1)
s3$cumsum = cumsum(s3$TotalCostPerConfig)
plot(s3$CPUs, s3$cumsum)
install.packages(c("dismo", "raster", "gbm", "SDMTools", "RMySQL", "rgdal"), repos='http://cran.mtu.edu/')
install.packages("RMySQL")
## load external libraries
library(gbm) ## base pacakges for regression trees
library(dismo) ## SDM package --> boosted regression tree function
library(raster) ## for raster manipulation
library(SDMTools) ## for accuracy assessment
library(RMySQL) ## for database communication
library(rgdal)
library(parallel)
install.packages(c("dismo", "raster", "gbm", "SDMTools", "RMySQL",
types
types <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/valid_GCE_types.csv")
types <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/valid_GCE_types.csv")
types
plot(types)
head(types)
plot(types$Cores, types$GBMemory, col=types$ConfigurationType)
plot(types$Cores, types$GBMemory)
predDef <- types[which(types$ConfigurationType == "Predefined") , ]
preDef
predDef
types <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/valid_GCE_types.csv")
types <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/valid_GCE_types.csv")
preDef <- types[which(types$ConfigurationType == "Predefined") , ]
preDef
plot(types$Cores, types$GBMemory)
points(preDef$Cores, preDef$GBMemory, col='red')
points(preDef$Cores, preDef$GBMemory, col='red', pch=16)
plot(types$Cores, types$GBMemory, pch=1)
plot(types$Cores, types$GBMemory, pch=3)
plot(types$Cores, types$GBMemory, pch=30)
plot(types$Cores, types$GBMemory, pch=4)
plot(types$Cores, types$GBMemory, pch=1, col='gray')
points(preDef$Cores, preDef$GBMemory, col='red', pch=16)
plot(types$Cores, types$GBMemory, pch=1, col='gray', xlab='vCPU')
plot(types$Cores, types$GBMemory, pch=1, col='gray', xlab='vCPU', ylab='GB Memory')
points(preDef$Cores, preDef$GBMemory, col='red', pch=16)
exp
e
e <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/experiments_v2.csv")
e
points(e$CPU, e$Mem, pch=16, col='blue')
plot(types$Cores, types$GBMemory, pch=1, col='gray', xlab='A', ylab='B')
nrow(types)
e <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/experiments_v2.csv")
types <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/valid_GCE_types.csv")
types <- read.csv("/Users/scottsfarley/documents/thesis-scripts/data/review/valid_GCE_types.csv")
plot(types$Cores, types$GBMemory, pch=1, col='gray', xlab='vCPU', ylab='GB Memory', col=tpyes$Cost)
types
head(types)
plot(types$Cores, types$GBMemory, pch=1, col='gray', xlab='vCPU', ylab='GB Memory', col=types$Cost)
types$Cost
plot(types$Cores, types$GBMemory, pch=1, col='gray', xlab='vCPU', ylab='GB Memory', col=types$Cost)
plot(types$Cores, types$GBMemory, pch=1, col='gray', xlab='vCPU', ylab='GB Memory', col=as.factor(types$Cost)
)
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
pallette
palette
palette()
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
palette(rainbow(6))
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
types
head(types)
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
palette(rainbow(10000))
palette(rainbow(1024))
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
library("spatstat") ; library("plotrix")
install.packages('spatstat')
install.packages('plotrix')
library("spatstat") ; library("plotrix")
library("spatstat") ; library("plotrix")
colorRampPalette
colors <- c("#FF0000" , "#00FF00" , "#0000FF")
n.colors <- 100
palette <- colorRampPalette(colors, space = "rgb")(n.colors)
palette
plot(palette)
palette(types$Cost)
color.map <- colourmap( palette , range=range(x) )
heat.colors(n)
palette <- heat.colors(n)
palette
palette(1)
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
types$Cost <- as.numeric(types$Cost)
types
hist(types$Cost)
hist(types$Cost, col=types$Cost)
hist(types$Cost)
barplot
barplot(types$Cores)
barplot(types$Cores, col=types$Cost)
palette
palette()
barplot(types$Cores, col=factor(types$Cost))
types$Cost
barplot(types$Cores, col=factor(types$Cost))
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col=types$Cost)
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory')
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='gray')
exp = types[which(types$GBMemory % 1 == 0), ]
exp = types[which(types$GBMemory %% 1 == 0), ]
exp
plot(exp$Cores, exp$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
exp = types[which(types$GBMemory %% 2 == 0), ]
plot(exp$Cores, exp$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
max(types$Cost)
types$Cost
exp$Cost
exp
head(exp)
exp = types[which(types$GBMemory %% 3 == 0), ]
plot(exp$Cores, exp$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
types
head(types)
exp
head(exp)
head(exp, 10)
exp
plot(exp$Cores, exp$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='gray')
plot(exp$Cores, exp$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='gray')
points(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='gray')
plot(types$Cores, types$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='gray')
points(exp$Cores, exp$GBMemory, pch=1,  xlab='vCPU', ylab='GB Memory', col='red')
exp
title("Valid Google Compute Engine Types\nAnd Chosen Experiment Configurations")
?runif
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
runif(1, 0, 1)
rand
clear()
rm(list = ls())
install_github("coorClimR", "cyber4paleo")
library(devtools)
install_github("coorClimR", "cyber4paleo")
install_github("coorClimR", "cyber4paleo")
library(coorClimR)
install_github("cyber4paleo/coorClimR")
tsuga
load("/Users/scottsfarley/documents/tsuga.rdata")
tsuga
makeScatterPlot(tsuga)
library(coorClimR)
makeScatterPlot(tsuga)
makeTSPlot
queryNeotoma
coorClimR::queryNeotoma
source('~/Documents/coorClimR/R/coorClimR.R')
install("coorClimR")
setwd("/Users/scottsfarley/documents/coorClimR")
install("coorClimR")
devtools::document()
install("coorClimR")
setwd(".")
install("coorClimR")
setwd("/Users/scottsfarley/documents")
install("coorClimR")
rm()
rm(list=ls())
queryNeotoma
install("coorClimR")
queryNeotoma
install("coorClimR")
queryNeotoma
devtools::document()
setwd("/coorClimR")
setwd("/users/scottsfarley/documents/coorClimR")
devtools::document()
rm(list-ls())
rm(list=ls())
install_github("cyber4paleo/coorClimR")
queryNeotoma
queryNeotoma()
install_github("cyber4paleo/coorClimR")
library(coorClimR)
queryNeotoma()
install_github("cyber4paleo/coorClimR")
devtools::document()
devtools::document()
devtools::document()
install_github("cyber4paleo/coorClimR")
library(coorClimR)
queryNeotoma
head(tsuga)
load("/Users/scottsfarley/documents/tsuga.rdata")
setwd("/users/scottsfarley/documents/coorClimR")
devtools::document()
install_github("cyber4paleo/coorClimR")
makeScatterPlot(tsuga, xVariable="Maximum Temperature", yVariable='Precipitation')
title("January Maximum Temperature and\n January Precipitation")
cimateDF <- tsuga
xVariable = "Maximum Temperature"
yVariable = "Minimum Temperature"
xPeriod = 1
yPeriod = 1
xdf <- climateDF[which(climateDF$VariableType == xVariable), ]
xdf <- xdf[which(xdf$variablePeriod == xPeriod), ]
ydf <- climateDF[which(climateDF$VariableType == yVariable), ]
ydf <- ydf[which(ydf$variablePeriod == yPeriod), ]
climateDF <- tsuga
xdf <- climateDF[which(climateDF$VariableType == xVariable), ]
xdf <- xdf[which(xdf$variablePeriod == xPeriod), ]
ydf <- climateDF[which(climateDF$VariableType == yVariable), ]
ydf <- ydf[which(ydf$variablePeriod == yPeriod), ]
xValues = xdf$value
yValues = ydf$value
plot(xValues, yValues, col=pointColor, xlab="January Minimum Tem", ylab=paste(yVariable, yPeriod))
xVariable = "Precipitation"
xdf <- climateDF[which(climateDF$VariableType == xVariable), ]
xdf <- xdf[which(xdf$variablePeriod == xPeriod), ]
ydf <- climateDF[which(climateDF$VariableType == yVariable), ]
ydf <- ydf[which(ydf$variablePeriod == yPeriod), ]
xValues = xdf$value
yValues = ydf$value
plot(xValues, yValues, col="gray", xlab="January Precipitation", ylab="January Minimum Temperature")
yModern <- ydf[which(ydf$yearsBP == 0), ]
xModern <- xdf[which(xdf$yearsBP == 0), ]
points(xModern$value, yModern$value, col="black")
title("Tsuga:\n January Precipitation and Minimum Temperature")
alces
source('~/.active-rstudio-document')
devtools::document()
devtools::document()
source('~/.active-rstudio-document')
queryAll("canis lupus")
canis <- queryAll("canis lupus")
save(canis, file='canis.rdata')
canis.maxT <- canis[which(canis$VariableType == "MaximumTemperature"), ]
canis.maxT.7 <- canis.maxT[which(canis.maxT$variablePeriod == 7), ]
canis.maxT.7
canis.maxT <- canis[which(canis$VariableType == "MaximumTemperature"), ]
head(canis.maxT)
canis.maxT <- canis[which(canis$VariableType == "Maximum Temperature"), ]
canis.maxT.7 <- canis.maxT[which(canis.maxT$variablePeriod == 7), ]
head(canis.maxT.7)
hist(canis.maxT.7$value)
hist(canis.maxT.7$value, xlab("July Maximum Temperature"))
hist(canis.maxT.7$value, xlab = "July Maximum Temperature")
title("Canis Lupus:\n Histogram of July Max Temp")
hist(canis.maxT.7$value, xlab = "July Maximum Temperature", title="Canis Lupus:\n Histogram of July Max Temp")
hist(canis.maxT.7$value, xlab = "July Maximum Temperature")
hist(canis.maxT.7$value, xlab = "July Maximum Temperature")
title("Canis Lupus:\n Histogram of July Max Temp")
hist(canis.maxT.7$value, xlab = "July Maximum Temperature")
makeTSPlot(tsuga, responseVariable="Precipitation")
library(ddply)
library(plyr)
makeTSPlot(tsuga, responseVariable="Precipitation")
source('~/.active-rstudio-document')
makeTSPlot(tsuga, responseVariable="Precipitation")
source('~/.active-rstudio-document')
makeTSPlot(tsuga, responseVariable="Precipitation")
makeTSPlot(tsuga, responseVariable="Precipitation")
makeTSPlot(canis)
bison <- queryAll('bison bison')
source('~/Documents/coorClimR/R/coorClimR.R')
queryVertnet("canis lupus")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
unload
unload(coorClimR)
detach("package:coorClimR", unload=TRUE)
convertVertnettoDF("canis lupus")
convertVertnettoDF
source('~/.active-rstudio-document')
queryAll("bison bison")
alces <- queryAll("alces alces")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
